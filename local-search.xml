<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《web面试题》</title>
    <link href="/2023/06/28/%E3%80%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%8B/"/>
    <url>/2023/06/28/%E3%80%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="面试官角度"><a href="#面试官角度" class="headerlink" title="面试官角度"></a>面试官角度</h1><p>1、考察对方专业知识，根据对方的回答再进行深入提问。 </p><p>2、询问对方感兴趣的技术是什么（技术方面），然后根据他所说的技术，深入挖掘问下去。 </p><p>3、询问对方的做项目中遇到什么样的难题，怎么解决的？  针对于某个点，最好在做项目的时候去整理，不需要最后面试了整理。 </p><p>4、询问对方平时遇到问题都是如何解决的或者抛出一个问题让对方给出解决方案或者思路。 </p><p>5、询问对方下班后的时间都会花在什么地方？  考察自学能力 6、在沟通的过程观察对方的表达能力。  考察沟通能力 7、谈到薪资的过程</p><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><h2 id="什么是标签语义化"><a href="#什么是标签语义化" class="headerlink" title="什么是标签语义化"></a>什么是标签语义化</h2><p> 合适的地方选择使用合理的标签</p><p> HTML 语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式 CCS 情况下也以一种文档格式显示，并且是容易阅读的。</p><p>有利于 SEO。 搜索引擎优化 对搜索引擎的排名状况 关键字搜索后的，显示排名  后边还能再问？你如何做到搜索引擎优化，还有其它方法吗?</p><h2 id="垂直居中的方法有哪些"><a href="#垂直居中的方法有哪些" class="headerlink" title="垂直居中的方法有哪些"></a>垂直居中的方法有哪些</h2><p> 文字的垂直居中： 设置所在盒子的高度和行高相同  盒子的垂直居中：定位、弹性布局</p><h2 id="清除浮动的方法有哪些"><a href="#清除浮动的方法有哪些" class="headerlink" title="清除浮动的方法有哪些"></a>清除浮动的方法有哪些</h2><p>用CSS画一条0.5px的线</p><p>在移动端，如果画一条1px的线，在实际的物理分辨率下，可能2px，画一个0.5px的线也是为了 终显示为1px</p><p>解决方案：使用缩放的方式缩小为0.5</p><h2 id="用CSS画一个三角形"><a href="#用CSS画一个三角形" class="headerlink" title="用CSS画一个三角形"></a>用CSS画一个三角形</h2><p>图片也可以做三角形的图标，如果使用图片涉及到网络请求，影响到加载速度（雪碧图问题） 如果使用三角绘制的图标，需要网络请求</p><h2 id="说一说px和em，rem，vw"><a href="#说一说px和em，rem，vw" class="headerlink" title="说一说px和em，rem，vw"></a>说一说px和em，rem，vw</h2><p> px： 常用的，它是相对于显示器屏幕分辨率而言的。</p><p>优缺点：比较稳定和精确，但在浏览器中放大或缩放浏览页面时会出现页面混乱的情况。</p><p>em：相对单位，基准点为父节点字体的大小，如果自身定义了 font-size 按自身来计算（浏览器默认字体是 16px），整个页面内 1em 不是一个固定的值。</p><p>优缺点：em 的值并不是固定的，它会继承父级元素的字体大小。</p><p>rem：相对单位，基于 root 元素，即根据html 元素的大小来计算，不受容器本身字体大小的影响，全部根据html 的字体大小重新计算。设定根元素 的font-size 属性，默认为 16px，那么 1rem &#x3D; 16px。 </p><p>优缺点：这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例</p><p>地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。</p><p>flexible.js 淘宝移动端适配框架，采用了rem</p><p>vw&#x2F;vh：1vw等于屏幕可视区宽度的可视区域的百分之一，可以应用在响应式，移动端也可以采用。</p><h2 id="display-none和visibility-hidden有什么区别"><a href="#display-none和visibility-hidden有什么区别" class="headerlink" title="display:none和visibility: hidden有什么区别"></a>display:none和visibility: hidden有什么区别</h2><p> 隐藏元素有几种方案</p><p> display:none 隐藏后不再占位</p><p> visibility:hidden 隐藏后继续占位</p><h2 id="CSS动画animation属性有哪些？应用？"><a href="#CSS动画animation属性有哪些？应用？" class="headerlink" title="CSS动画animation属性有哪些？应用？"></a>CSS动画animation属性有哪些？应用？</h2><p>animation-name</p><p>设置对象所应用的动画名称，就是关键帧的名称</p><p>必须与规则@keyframes配合使用，例：@keyframes mymove{} animation-name:mymove; </p><p>animation-duration</p><p>设置对象动画的持续时间</p><p>说明：animation-duration:3s; 动画完成使用的时间为3s </p><p>animation-timing-function</p><p>设置对象动画的过渡类型</p><p>属性值：</p><p>linear：线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)</p><p> ease：平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0) </p><p>ease-in：由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0) </p><p>ease-out：由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0)</p><p>ease-in-out：由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)</p><p>step-start:马上跳到动画每一结束桢的状态</p><p> animation-delay </p><p>设置对象动画延迟的时间说明：animation-delay:1s; 动画开始前延迟的时间为1s</p><p>animation-direction</p><p>设置对象动画在循环中是否反向运动</p><p>属性值：</p><p>normal：正常方向 </p><p>reverse：反方向运行</p><p>alternate：动画先正常运行再反方向运行，并持续交替运行 </p><p>alternate-reverse：动画先反运行再正方向运行，并持续交替运行 </p><p>animation-play-state</p><p>设置对象动画的状态</p><p>属性值：</p><p>animation-play-state:running ：运动 </p><p>animation-play-state：paused ：暂停 </p><p>animation-iteration-count：设置对象动画的循环次数</p><p>属性值：</p><p>animation-iteration-count：infinite ：无限循环 </p><p>animation-iteration-count number：加上循环的次数，动画就会循环几次</p><h2 id="追问：动画方案除了CSS还有哪些？"><a href="#追问：动画方案除了CSS还有哪些？" class="headerlink" title="追问：动画方案除了CSS还有哪些？"></a>追问：动画方案除了CSS还有哪些？</h2><p>回答：JS定时器动画</p><h2 id="src和href有什么区别，什么时候用到"><a href="#src和href有什么区别，什么时候用到" class="headerlink" title="src和href有什么区别，什么时候用到"></a>src和href有什么区别，什么时候用到</h2><p>（1）    href：   href是Hypertext Reference的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。并行下载该文档，不会停止对当前文档的处理</p><p>（2）    src：   src是source的缩写，src指向的内容会嵌入到文档当前标签所在位置 如img、script、iframe当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。</p><h2 id="什么是-CSS-初始化？并说说为什么要初始化-CSS-样式？"><a href="#什么是-CSS-初始化？并说说为什么要初始化-CSS-样式？" class="headerlink" title="什么是 CSS 初始化？并说说为什么要初始化 CSS 样式？"></a>什么是 CSS 初始化？并说说为什么要初始化 CSS 样式？</h2><p>CSS 初始化是指：开发者对浏览器的默认样式进行重置。</p><p>1 、浏览器差异</p><p>因为浏览器的兼容问题，不同的样式会有默认初始样式，margin 和padding，下划线等等，浏览器不同， 数值还不一样，如果直接写样式，会出现差异，布局出现错乱，所以要初始化样式，达到统一的布局。</p><p>2 、提高编码质量</p><p>初始化CSS 后，可以让开发者省去很多写单独兼容的代码，减少代码体积，节约网页下载时间；还会使得我们开发网页内容时更加方便简洁，开发者就不用考虑太多基础样式的兼容问题了。</p><h2 id="有遇到过margin重合问题吗"><a href="#有遇到过margin重合问题吗" class="headerlink" title="有遇到过margin重合问题吗"></a>有遇到过margin重合问题吗</h2><p>相邻两个盒子垂直方向上的margin会发生重叠，只会取比较大的margin</p><p>父盒子中给子盒子设置了上边距会出现在父盒子上方</p><p>设置padding代替margin</p><p>设置float</p><p>设置overflow</p><p>设置position：absolute 绝对定位</p><p>设置display： inline-block 。</p><h2 id="nth-child-和-nth-of-type-的区别"><a href="#nth-child-和-nth-of-type-的区别" class="headerlink" title="nth-child 和 nth-of-type 的区别"></a>nth-child 和 nth-of-type 的区别</h2><p>ele:nth-of-type(n)是指父元素下第n个ele元素， 而ele:nth-child(n)是指父元素下第n个元素且这个元素为ele，若不是，则选择失败。</p><h2 id="说一说你对盒模型的理解"><a href="#说一说你对盒模型的理解" class="headerlink" title="说一说你对盒模型的理解"></a>说一说你对盒模型的理解</h2><p>而目前市面上存在 2 中盒模型：标准盒模型 和IE 盒子模型，它俩对计算宽度和高度的不同。先说标准盒模型，也就是 W3C 规定的盒子模型。</p><p>盒子总宽度 &#x3D; width + padding + border + margin。盒子总高度 &#x3D; height + padding + border +margin。在标准模式下：也就是（划重点啦!!!!）我们设置的 width&#x2F;height 只是内容 content（上图橙色的部分）的宽&#x2F;高度，不包含 padding 和 border 值。</p><h2 id="说一说圣杯（双飞翼）布局"><a href="#说一说圣杯（双飞翼）布局" class="headerlink" title="说一说圣杯（双飞翼）布局"></a>说一说圣杯（双飞翼）布局</h2><p>两端固定，中间自适应</p><p> (1)弹性布局</p><p> (2)定位方式 </p><p>(3)浮动+margin负值 </p><h2 id="判断以下程序的输出结果"><a href="#判断以下程序的输出结果" class="headerlink" title="判断以下程序的输出结果:"></a>判断以下程序的输出结果:</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> age=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">this</span>.age=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age;<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> m=<span class="hljs-keyword">new</span> test();<span class="hljs-comment">//匿名函数</span><br>alert(m()); <span class="hljs-comment">//匿名函数自调用</span><br><span class="hljs-keyword">var</span> n=test(); <span class="hljs-comment">// this指向全局window</span><br>alert(n());<br><br></code></pre></td></tr></table></figure><p>答案： 100 50 </p><h2 id="判断以下程序的输出结果-1"><a href="#判断以下程序的输出结果-1" class="headerlink" title="判断以下程序的输出结果:"></a>判断以下程序的输出结果:</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;The Window&quot;</span>;<br><span class="hljs-keyword">var</span> obj=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;My obj&quot;</span>,<br><span class="hljs-attr">getName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> this.name;<br>&#125;<br>&#125;<br>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.getName()());<br><br></code></pre></td></tr></table></figure><p>答案： the window </p><h2 id="判断以下程序的输出结果-2"><a href="#判断以下程序的输出结果-2" class="headerlink" title="判断以下程序的输出结果:"></a>判断以下程序的输出结果:</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">length</span>=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.<span class="hljs-built_in">length</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br><span class="hljs-attr">length</span>:<span class="hljs-number">5</span>,<br><span class="hljs-attr">method</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>)&#123;<br>fn();<br>arguments[<span class="hljs-number">0</span>]();<br>&#125;<br>&#125;;<br>obj.method(fn,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>答案：2</p><h2 id="说一说数组扁平化解决办法"><a href="#说一说数组扁平化解决办法" class="headerlink" title="说一说数组扁平化解决办法"></a>说一说数组扁平化解决办法</h2><p>方法1：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr = <span class="hljs-selector-attr">[1, 2, [3, 4]</span>, <span class="hljs-selector-attr">[5, 6, [7, 8, [9, 10, [11, 12]</span>]]]]<br><span class="hljs-comment">// 方法1：ES10提供的一个函数</span><br><span class="hljs-comment">// 参数表示对多少层进行扁平化处理</span><br><span class="hljs-comment">// Inifiny(无穷) -&gt; 对无限层级进行扁平化</span><br>console<span class="hljs-selector-class">.log</span>(arr<span class="hljs-selector-class">.flat</span>(Infinity))<br><span class="hljs-selector-tag">var</span> arr = <span class="hljs-selector-attr">[1, 2, [3, 4]</span>, <span class="hljs-selector-attr">[5, 6, [7, 8, [9, 10, [11, 12]</span>]]]]<br><span class="hljs-comment">// 方法1：ES10提供的一个函数</span><br><span class="hljs-comment">// 参数表示对多少层进行扁平化处理</span><br><span class="hljs-comment">// Inifiny(无穷) -&gt; 对无限层级进行扁平化</span><br>console<span class="hljs-selector-class">.log</span>(arr<span class="hljs-selector-class">.flat</span>(Infinity))<br><br></code></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 方法2：使用递归</span><br><span class="hljs-comment">// 准备一个新数组，把扁平化以后的放入到一个新数组</span><br><span class="hljs-selector-tag">var</span> newArr = <span class="hljs-selector-attr">[]</span><br>function <span class="hljs-built_in">myFlat</span>(arr) &#123;<br><span class="hljs-comment">// 遍历传递进来的数组</span><br>arr<span class="hljs-selector-class">.forEach</span>((item) =&gt; &#123;<br><span class="hljs-comment">// item为当前的元素</span><br><span class="hljs-comment">// console.log(item)</span><br><span class="hljs-comment">// 判断当前所拿到的元素是否为数组</span><br><span class="hljs-keyword">if</span> (Array<span class="hljs-selector-class">.isArray</span>(item)) &#123;<br><span class="hljs-comment">// 递归, 继续进行扁平化处理</span><br><span class="hljs-function"><span class="hljs-title">myFlat</span><span class="hljs-params">(item)</span></span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果不是数组，直接添加到准备的新数组中</span><br>newArr<span class="hljs-selector-class">.push</span>(item)<br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">myFlat</span><span class="hljs-params">(arr)</span></span><br>console<span class="hljs-selector-class">.log</span>(newArr<span class="hljs-comment">// 方法2：使用递归</span><br><span class="hljs-comment">// 准备一个新数组，把扁平化以后的放入到一个新数组</span><br><span class="hljs-selector-tag">var</span> newArr = <span class="hljs-selector-attr">[]</span><br>function <span class="hljs-built_in">myFlat</span>(arr) &#123;<br><span class="hljs-comment">// 遍历传递进来的数组</span><br>arr<span class="hljs-selector-class">.forEach</span>((item) =&gt; &#123;<br><span class="hljs-comment">// item为当前的元素</span><br><span class="hljs-comment">// console.log(item)</span><br><span class="hljs-comment">// 判断当前所拿到的元素是否为数组</span><br><span class="hljs-keyword">if</span> (Array<span class="hljs-selector-class">.isArray</span>(item)) &#123;<br><span class="hljs-comment">// 递归, 继续进行扁平化处理</span><br><span class="hljs-function"><span class="hljs-title">myFlat</span><span class="hljs-params">(item)</span></span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果不是数组，直接添加到准备的新数组中</span><br>newArr<span class="hljs-selector-class">.push</span>(item)<br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">myFlat</span><span class="hljs-params">(arr)</span></span><br>console<span class="hljs-selector-class">.log</span>(newArr）<br></code></pre></td></tr></table></figure><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> obj = &#123;a:<span class="hljs-number">1</span>, b:<span class="hljs-number">2</span>, c:&#123;m:<span class="hljs-number">1</span>, n:<span class="hljs-number">2</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型， 拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改 变了这个地址，就会影响到另一个对象。 </p><p>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修 改新对象不会影响原对象。</p><p><img src="/%5Cimg%5C1.png"></p><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，<strong>新旧对象还是共享同一块内存</strong>。但深拷贝会另 外创造一个一模一样的对象，<strong>新对象跟原对象不共享内存</strong>，修改新对象不会改到原对象。 </p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ol><li><p>for-in遍历对象展开运算符 … </p></li><li><p>Object.assin() </p></li><li><p>使用lodash提供的函数 _.clone()</p></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li>使用lodash提供的函数 _.cloneDeep()</li><li>使用JSON对象，先转字符串再转对象，JSON.parse(JSON.stringify()) </li><li>使用递归函数完成</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span></span>(oldObj) &#123;<br><span class="hljs-comment">// 判断当前要拷贝的是数组还是对象，新建空对象或者空数组</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = <span class="hljs-keyword">Array</span>.isArray(oldObj) ? [] : <span class="hljs-type"></span>&#123;&#125;<br><span class="hljs-comment">// 只能使用for-in，既可以遍历数组，也可以遍历对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj) &#123;<br><span class="hljs-comment">// console.log(k, oldObj[k])</span><br><span class="hljs-comment">// 要被每一项放入到创建的新对象（数组）</span><br><span class="hljs-comment">// 如果是原始类型的值，直接放入到新对象（数组），否则是引用类型的值，进行递归拷贝</span><br><span class="hljs-keyword">if</span> (typeof oldObj[k] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[k] = deepClone(oldObj[k])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[k] = oldObj[k]<br>&#125;<br>&#125;<br><span class="hljs-comment">// 最后返回新对象（数组）</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>lodash是一个工具库，提供大量的工具函数</p><p>需要先去下载安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> lodash<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 引入lodash</span><br>const _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br><span class="hljs-selector-tag">var</span> obj1 = &#123;<br><span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span>,<br><span class="hljs-selector-tag">b</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>c: &#123;<br>m: <span class="hljs-number">3</span>,<br>n: <span class="hljs-number">4</span><br>&#125;,<br>d: <span class="hljs-selector-attr">[5, 6, 7]</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 使用lodash提供的克隆函数，完成浅拷贝</span><br><span class="hljs-comment">var obj2 = _.clone(obj1)</span><br><span class="hljs-comment">console.log(obj2)</span><br><span class="hljs-comment">console.log(obj2.c === obj1.c)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 深拷贝</span><br><span class="hljs-selector-tag">var</span> obj3 = _<span class="hljs-selector-class">.cloneDeep</span>(obj1)<br></code></pre></td></tr></table></figure><h2 id="new操作符都做了哪些事情"><a href="#new操作符都做了哪些事情" class="headerlink" title="new操作符都做了哪些事情"></a>new操作符都做了哪些事情</h2><ol><li><p>首先创建了一个新对象 </p></li><li><p>设置原型，将对象的原型设置为函数的prototype对象 3</p></li><li><p>让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性） </p></li><li><p>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型 的对象</p></li></ol><p>   总结： 实例化对象、继承原型、this指向创建的对象、返回创建的对象</p><h2 id="什么是原型？什么是原型链"><a href="#什么是原型？什么是原型链" class="headerlink" title="什么是原型？什么是原型链?"></a>什么是原型？什么是原型链?</h2><ol><li>原型，每个构造函数都有原型对象，是通过 Person.prototype来访问到的</li><li>proto 实例化的对象通过proto可以访问到继承的原型对象 </li><li>构造函数constructor，原型对象通过constructor可以访问到构造函数</li><li>实例与原型 </li><li>原型的原型</li></ol><p><img src="/%5Cimg%5C2.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-comment">// 往原型对象中添加方法</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是小新&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;新哥&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1)<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;铭桑&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2)<br><span class="hljs-comment">// 通过实例化的对象访问继承的原型</span><br><span class="hljs-comment">// console.log(p1.__proto__)</span><br><span class="hljs-comment">// console.log(Person.prototype)</span><br><span class="hljs-comment">// 原型对象通过constructor可以访问到构造函数</span><br><span class="hljs-comment">// console.log(Person.prototype.constructor)</span><br><span class="hljs-comment">// 原型对象下也有一个name属性</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-comment">// 如果要访问name，首先到当前实例化对象中去寻找，如果找不到会到原型中去查找，这就是原型链的</span><br>关系<br><span class="hljs-comment">// 删除当前对象中的name</span><br><span class="hljs-comment">// delete p1.name</span><br><span class="hljs-comment">// console.log(p1.name)</span><br><span class="hljs-comment">// 最早的对象创建 new Object()</span><br><span class="hljs-comment">// 原型对象也是一个对象，就是通过new Object()创建而来</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br></code></pre></td></tr></table></figure><p>原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 proto 指向构造函数的 prototype原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 proto 指向构造函数的 prototype</p><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向 原型对象的内部指针。 </p><ol><li>当一个对象查找属性和方法时会从自身查找,如果查找不到则会通过proto指向被实例化的构造函数 的prototype</li><li>隐式原型也是一个对象,是指向我们构造函数的原型  </li><li>除了最顶层的Object对象没有proto_，其他所有的对象都有proto,这是隐式原型  </li><li>隐式原型proto的作用是让对象通过它来一直往上查找属性或方法，直到找到最顶层的Object的 proto__属性，它的值是null,这个查找的过程就是原型链</li></ol><h2 id="ES5和ES6的继承"><a href="#ES5和ES6的继承" class="headerlink" title="ES5和ES6的继承"></a>ES5和ES6的继承</h2><p><img src="/img/3.png"></p><h3 id="ES5继承"><a href="#ES5继承" class="headerlink" title="ES5继承"></a>ES5继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-comment">// 原型</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-comment">// 子类构造函数继承父类构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">name, age</span>) &#123;<br><span class="hljs-comment">// 调用父类构造函数，让父类中的this指向当前子类</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br><span class="hljs-comment">// 添加子类自己的属性</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-comment">// 子类的原型继承父类的原型，让子类的原型指向父类实例化的对象</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-comment">//添加子类自己的方法</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">run</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我今年xxx&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><span class="hljs-comment">// 通过子类实例化对象</span><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;xin&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1)<br>p1.<span class="hljs-title function_">say</span>()<br></code></pre></td></tr></table></figure><h3 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">class Person &#123;<br><span class="hljs-comment">// 构造函数，在实例化对象的时候，自动调用</span><br><span class="hljs-function"><span class="hljs-title">constructor</span><span class="hljs-params">(name)</span></span> &#123;<br>this<span class="hljs-selector-class">.name</span> = name<br>&#125;<br><span class="hljs-comment">// 添加在原型对象</span><br><span class="hljs-function"><span class="hljs-title">say</span><span class="hljs-params">()</span></span> &#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我是&#x27;</span> + this.name)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 子类继承父类</span><br>class Son extends Person &#123;<br><span class="hljs-function"><span class="hljs-title">constructor</span><span class="hljs-params">(name, age)</span></span> &#123;<br><span class="hljs-comment">// 继承父类构造函数</span><br><span class="hljs-function"><span class="hljs-title">super</span><span class="hljs-params">(name)</span></span><br><span class="hljs-comment">// 添加子类属性</span><br>this<span class="hljs-selector-class">.age</span> = age<br>&#125;<br><span class="hljs-comment">// 父类的原型会自动的继承</span><br><span class="hljs-comment">// 添加子类的方法</span><br><span class="hljs-function"><span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;xxx&#x27;</span> + this.age)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 通过子类实例化对象</span><br>const p1 = new <span class="hljs-built_in">Son</span>(<span class="hljs-string">&#x27;xin&#x27;</span>, <span class="hljs-number">18</span>)<br>console<span class="hljs-selector-class">.log</span>(p1)<br></code></pre></td></tr></table></figure><h2 id="讲一下-var、let、const-的区别"><a href="#讲一下-var、let、const-的区别" class="headerlink" title="讲一下 var、let、const 的区别?"></a>讲一下 var、let、const 的区别?</h2><p>var 声明的变量有变量提升的特性，而 let、const 没有<br>var 声明的变量会挂载到 windows 对象上，所以使用 var 声明的是全局变量，而 let 和 const 声明的变<br>量是局部变量, 块级作用域外不能访问<br>同一作用域下 let 和 const 不能重复声明同名变量，而var可以<br>const声明的是常量，必须赋初值，一旦声明不能再次赋值修改，如果声明的是复合类型数据，可以修改<br>其属性</p><h2 id="箭头函数和普通函数有什么区别"><a href="#箭头函数和普通函数有什么区别" class="headerlink" title="箭头函数和普通函数有什么区别?"></a>箭头函数和普通函数有什么区别?</h2><p>（1）箭头函数比普通函数更加简洁 如果没有参数，就直接写一个空括号即可 如果只有一个参数，<br>可以省去参数括号 如果有多个参数，用逗号分割 如果函数体的返回值只有一句，可以省略大括号<br>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常用的就是调用<br>一个函数： let fn &#x3D; () &#x3D;&gt; void doesNotReturn()<br> (2) 箭头函数没有自己的this 箭头函数不会创建自己的this,所以它没有自己的this,它只会在自己作用域<br>的上一层继承this。所以箭头函数中的this的指向在它在定义时一家确定了，之后不会改变。 </p><p>(3)箭头函数继承来的this指向永远不会改变<br> (4) call()、apply()、bind()等方法不能改变箭头函数中的this指向<br> (5) 箭头函数不能作为构造函数使用<br> (6) 箭头函数没有自己的arguments<br> (7) 箭头函数没有prototype </p><h2 id="如何判断this指向？箭头函数的this指向什么？"><a href="#如何判断this指向？箭头函数的this指向什么？" class="headerlink" title="如何判断this指向？箭头函数的this指向什么？"></a>如何判断this指向？箭头函数的this指向什么？</h2><h3 id="普通函数直接调用中的this"><a href="#普通函数直接调用中的this" class="headerlink" title="普通函数直接调用中的this"></a>普通函数直接调用中的this</h3><p> 普通函数中的 this 指向 window 对象， 严格模式下为 undefiend</p><h3 id="在对象里调用的this"><a href="#在对象里调用的this" class="headerlink" title="在对象里调用的this"></a>在对象里调用的this</h3><p>指向调用函数的那个对象，this: 谁调用就指向谁</p><h3 id="在构造函数以及类中的this"><a href="#在构造函数以及类中的this" class="headerlink" title="在构造函数以及类中的this"></a>在构造函数以及类中的this</h3><p>构造函数和类需要配合 new 使用, 而 new 关键字会将构造函数中的 this 指向实例对象，所以 this 指向<br>实例对象。</p><h3 id="绑定事件函数的this"><a href="#绑定事件函数的this" class="headerlink" title="绑定事件函数的this"></a>绑定事件函数的this</h3><p>谁调用就指向谁。</p><h3 id="定时器中的this"><a href="#定时器中的this" class="headerlink" title="定时器中的this"></a>定时器中的this</h3><p>定时器中的 this 指向 window，因为定时器中采用回调函数作为处理函数，而回调函数的 this 指向<br>window。</p><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h3><p>箭头函数没有自己的 this，会继承其父作用域的 this。</p><h2 id="call、apply、bind的区别"><a href="#call、apply、bind的区别" class="headerlink" title="call、apply、bind的区别"></a>call、apply、bind的区别</h2><p> 都是改变this指向</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 三者都是用于改变this指向</span><br><span class="hljs-selector-tag">var</span> obj1 = &#123;<br><span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-selector-tag">var</span> obj2 = &#123;<br><span class="hljs-selector-tag">a</span>: <span class="hljs-number">2</span>,<br>防抖和节流<br>在dom操作过程，在绑定事件触发频率上进行的控制<br>fn: function (c) &#123;<br>console<span class="hljs-selector-class">.log</span>(this<span class="hljs-selector-class">.a</span>, c)<br>&#125;<br>&#125;<br><span class="hljs-comment">// obj2.fn(5)</span><br><span class="hljs-comment">// 通过call改变this指向，会触发该函数，把剩余参数直接往后放</span><br>obj2<span class="hljs-selector-class">.fn</span><span class="hljs-selector-class">.call</span>(obj1, <span class="hljs-number">5</span>)<br><span class="hljs-comment">// 通过apply改变this指向，会出发该函数，把剩余参数放数组</span><br>obj2<span class="hljs-selector-class">.fn</span><span class="hljs-selector-class">.apply</span>(obj1, <span class="hljs-selector-attr">[5]</span>)<br><span class="hljs-comment">// 通过bind改变this指向，不会触发该函数，返回的是一个新的函数，需要再去调用</span><br>obj2<span class="hljs-selector-class">.fn</span><span class="hljs-selector-class">.bind</span>(obj1)(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">在dom操作过程，在绑定事件触发频率上进行的控制<br><br><span class="hljs-comment">// 防抖：多次触发，合并成一次(连续多次触发执行一次)</span><br><span class="hljs-comment">//fn 要进行防抖处理的函数</span><br><span class="hljs-comment">//delay间隔时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br><span class="hljs-comment">// 声明变量保存定时器</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span><br><span class="hljs-comment">// 防抖处理后还是一个函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 如果之前存在一个事件，就要清除</span><br><span class="hljs-keyword">if</span> (timer) &#123;<br><span class="hljs-built_in">clearTimeout</span>(timer)<br>&#125;<br><span class="hljs-comment">// 开启新的</span><br>timer = <span class="hljs-built_in">setTimeout</span>(fn, delay)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 给窗口绑定了滚动事件，只有滚动触发事件</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-title function_">debounce</span>(getNum, <span class="hljs-number">200</span>))<br><span class="hljs-comment">// 节流：一定时间内，只能触发一次</span><br><span class="hljs-comment">// fn 要处理节流的函数</span><br><span class="hljs-comment">// delay 间隔的时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br><span class="hljs-comment">// 定义变量，保存定时器</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 如果没有开启定时器，当前可以触发</span><br><span class="hljs-keyword">if</span> (!timer) &#123;<br><span class="hljs-comment">// 开启</span><br>timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 调用fn</span><br><span class="hljs-title function_">fn</span>()<br><span class="hljs-comment">// 只有执行完了，设置为null，才允许执行下一次</span><br>timer = <span class="hljs-literal">null</span><br>&#125;, delay)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-title function_">throttle</span>(getNum, <span class="hljs-number">500</span>))<br><br></code></pre></td></tr></table></figure><h2 id="说一下前端登录的流程"><a href="#说一下前端登录的流程" class="headerlink" title="说一下前端登录的流程?"></a>说一下前端登录的流程?</h2><p>初次登录的时候，前端调后调的登录接口，发送用户名和密码，后端收到请求，验证用户名和密码，验<br>证成功，就给前端返回一个token，和一个用户信息的值，前端拿到token，将token储存到<br>sessionStorage中。<br>然后跳转到下一个页面，根据后端接口的要求，只要不登录就不能访问的页面需要在前端每次跳转页面<br>师判断Cookies中是否有token，没有就跳转到登录页，有就跳转到相应的页面，<br>我们应该再每次发送post&#x2F;get请求的时候应该加入token，常用方法再项目utils&#x2F;service.js中添加全局拦<br>截器，将token的值放入请求头中 后端判断请求头中有无token，有token，就拿到token并验证token是<br>否过期，在这里过期会返回无效的token然后有个跳回登录页面重新登录并且清除本地用户的信息</p><h2 id="说一说如何把类数组转为数组"><a href="#说一说如何把类数组转为数组" class="headerlink" title="说一说如何把类数组转为数组"></a>说一说如何把类数组转为数组</h2><p>类数组也是数组的一种，将元素放入到了数组中，也是通过下标访问元素，也有length属性，但是类数<br>组中没有数组的API，JS中常用的类数组：arguments、dom操作中获取到一组节点元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">var aList = document.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-regexp">//</span> 转为数组<br><span class="hljs-regexp">//</span> aList = [...aList]<br><span class="hljs-regexp">//</span> 从一个可迭代的对象中创建数组<br><span class="hljs-regexp">//</span> aList = Array.from(aList)<br><span class="hljs-regexp">//</span> aList.reverse()<br><span class="hljs-regexp">//</span> slice(<span class="hljs-number">0</span>)截取数组元素<br>aList = Array.prototype.slice.call(aList, <span class="hljs-number">0</span>)<br>console.log(aList)<br><br></code></pre></td></tr></table></figure><h2 id="去除数组重复的元素"><a href="#去除数组重复的元素" class="headerlink" title="去除数组重复的元素"></a>去除数组重复的元素</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">var a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> unique(arr) &#123;<br><span class="hljs-regexp">//</span> var newArr = []<br><span class="hljs-regexp">//</span> arr.forEach((item) =&gt; &#123;<br><span class="hljs-regexp">//</span> <span class="hljs-regexp">//</span> 新数组中是否含有该元素<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">if</span> (newArr.indexOf(item) === -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-regexp">//</span> newArr.push(item)<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> &#125;)<br><span class="hljs-regexp">//</span> return newArr<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-keyword">function</span> unique(arr) &#123;<br><span class="hljs-regexp">//</span> ES6新增集合，不能出现重复的<br><span class="hljs-regexp">//</span> return Array.from(new Set(arr))<br>return [...new Set(arr)]<br>&#125;<br>console.log(unique(a))<br></code></pre></td></tr></table></figure><h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p><strong>闭包的定义</strong><br>闭包是指能够访问另一个函数作用域中的变量的一个函数。 在js中，只有函数内部的子函数才能访问局<br>部变量， 所以闭包可以理解成 “定义在一个函数内部的函数”。<br><strong>闭包的作用</strong><br>防止全局污染，利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部，让外部函数可以访<br>问到内部函数的变量和方法<br><strong>闭包的优点</strong><br>正常的函数，在执行完之后，函数里面声明的变量会被垃圾回收机制处理掉。但是形成闭包的函数在执<br>行之后，不会被回收，依旧存在内存中。<br><strong>闭包的缺点</strong><br>因为变量不会被回收，所以内存中一直存在，耗费内存。容易造成内存泄漏<br><strong>应用场景</strong><br>防抖和节流<br>经典试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// =&gt; ?</span><br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// =&gt; ?</span><br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> arr = []<br><span class="hljs-comment">// for循环中，每次都是往空数组中放入一个匿名函数</span><br><span class="hljs-comment">// [function()&#123;&#125;,function()&#123;&#125;,function()&#123;&#125;]</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>arr[i] = function () &#123;<br>console.log(i)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 循环结束后i为3</span><br><span class="hljs-comment">// i=3</span><br><span class="hljs-keyword">return</span> arr <span class="hljs-comment">//[function()&#123;&#125;,function()&#123;&#125;,function()&#123;&#125;]</span><br>&#125;<br><span class="hljs-keyword">var</span> newArr = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br>newArr[<span class="hljs-number">0</span>]()<br>newArr[<span class="hljs-number">1</span>]()<br>newArr[<span class="hljs-number">2</span>]()<br></code></pre></td></tr></table></figure><h2 id="数组排序的方法有哪些"><a href="#数组排序的方法有哪些" class="headerlink" title="数组排序的方法有哪些"></a>数组排序的方法有哪些</h2><p>数组提供的API可以 sort()<br>属于算法的题<br>常见的排序算法：冒泡排序、快速排序、二分法…</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>冒泡排序<br>var arr = [<span class="hljs-number">23</span>, <span class="hljs-number">9</span>, <span class="hljs-number">78</span>, <span class="hljs-number">6</span>, <span class="hljs-number">45</span>]<br><span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-regexp">//</span> console.log(i)<br><span class="hljs-regexp">//</span> 内层循环，控制每一轮比较的次数<br><span class="hljs-regexp">//</span> i 长度<br><span class="hljs-regexp">//</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> (var j = <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br><span class="hljs-regexp">//</span> j 代表循环的当前数字的下标 arr[j]<br><span class="hljs-regexp">//</span> j+<span class="hljs-number">1</span> 代表下一个数字的下标 arr[j+<span class="hljs-number">1</span>]<br><span class="hljs-regexp">//</span> 如果当前数字大于下一个数字，则位置交换<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j]<br>arr[j] = arr[j + <span class="hljs-number">1</span>]<br>arr[j + <span class="hljs-number">1</span>] = temp<br>&#125;<br>&#125;<br>&#125;<br>console.log(arr)<br></code></pre></td></tr></table></figure><h2 id="说说es6的新增特性"><a href="#说说es6的新增特性" class="headerlink" title="说说es6的新增特性"></a>说说es6的新增特性</h2><p>let、const： 声明变量和常量<br>模板字符串：增强版的字符串，用反引号标识，嵌入变量只需要放在${}中<br>箭头函数：ES6中函数定义不再使用关键字function()，而是利用了()&#x3D;&gt;来进行定义<br>解构赋值：按照类型的不同有不同的方式提取值，赋值<br>Symbol：新增的基本数据类型，特点就是里面的值唯一<br>Set 和 Map 数据结构<br>展开运算符(…): 可以将数组或对象里面的值展开, 还可以将 Set 数据结构转换为数组<br>for…of 循环: 可以遍历数组对象以及 Set 和 Map 数据结构<br>class 类：通过 extends 实现继承<br>promise、(async&#x2F;await): 都是用来解决异步编程的方案<br>proxy：代理对象，直接监听对象的变化，然后触发相应的逻辑</p><h2 id="forEach、for-in、for-of三者区别"><a href="#forEach、for-in、for-of三者区别" class="headerlink" title="forEach、for in、for of三者区别"></a>forEach、for in、for of三者区别</h2><h2 id="Set和Map有什么区别"><a href="#Set和Map有什么区别" class="headerlink" title="Set和Map有什么区别"></a>Set和Map有什么区别</h2><h2 id="地址栏输入URL以后-发生了什么"><a href="#地址栏输入URL以后-发生了什么" class="headerlink" title="地址栏输入URL以后,发生了什么"></a>地址栏输入URL以后,发生了什么</h2><h2 id="为什么有跨域-跨域的解决方式-跨域是为了什么-详细讲讲"><a href="#为什么有跨域-跨域的解决方式-跨域是为了什么-详细讲讲" class="headerlink" title="为什么有跨域,跨域的解决方式,跨域是为了什么,详细讲讲"></a>为什么有跨域,跨域的解决方式,跨域是为了什么,详细讲讲</h2><h2 id="webStorage存储-几种的区别是什么-多标签页之间访问"><a href="#webStorage存储-几种的区别是什么-多标签页之间访问" class="headerlink" title="webStorage存储,几种的区别是什么,多标签页之间访问?"></a>webStorage存储,几种的区别是什么,多标签页之间访问?</h2>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建教程</title>
    <link href="/2023/06/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2023/06/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>相关：hexo、fluid、node、git、gitee</p><h2 id="【1】gitee注册"><a href="#【1】gitee注册" class="headerlink" title="【1】gitee注册"></a>【1】gitee注册</h2><blockquote><p>【gitee官方注册地址】：<a href="https://gitee.com/signup">https://gitee.com/signup</a></p></blockquote><h2 id="【2】Typora下载"><a href="#【2】Typora下载" class="headerlink" title="【2】Typora下载"></a>【2】Typora下载</h2><blockquote><p>【下载地址】：<a href="https://www.typora.io/">https://www.typora.io/</a></p></blockquote><h2 id="【3】node安装"><a href="#【3】node安装" class="headerlink" title="【3】node安装"></a>【3】node安装</h2><blockquote><p>【下载地址】：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>【安装过程】：选择磁盘可以切换到其他盘，然后一直下一步就好了。</p></blockquote><h2 id="【4】git安装"><a href="#【4】git安装" class="headerlink" title="【4】git安装"></a>【4】git安装</h2><blockquote><p>【下载地址】：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>【安装过程】：选择磁盘可以切换到其他盘，然后一直下一步就好了。</p></blockquote><h1 id="【本地博客搭建】"><a href="#【本地博客搭建】" class="headerlink" title="【本地博客搭建】"></a>【本地博客搭建】</h1><h2 id="【1】hexo-cli安装"><a href="#【1】hexo-cli安装" class="headerlink" title="【1】hexo-cli安装"></a>【1】hexo-cli安装</h2><blockquote><p>npm install hexo-cli -g</p></blockquote><h2 id="【2】初始化hexo项目"><a href="#【2】初始化hexo项目" class="headerlink" title="【2】初始化hexo项目"></a>【2】初始化hexo项目</h2><blockquote><p>hexo init blog（项目名字随意）</p></blockquote><h2 id="【3】项目启动"><a href="#【3】项目启动" class="headerlink" title="【3】项目启动"></a>【3】项目启动</h2><blockquote><p>永远的hexo三件套：</p><p>-清除生成的页面相关内容</p><p>hexo clean</p><p>-构建生成的页面相关内容</p><p>hexo g</p><p>-项目启动</p><p>hexo s</p></blockquote><h1 id="【添加主题模板Fluid】"><a href="#【添加主题模板Fluid】" class="headerlink" title="【添加主题模板Fluid】"></a>【添加主题模板Fluid】</h1><h2 id="【1】在blog-themes目录下"><a href="#【1】在blog-themes目录下" class="headerlink" title="【1】在blog\themes目录下"></a>【1】在blog\themes目录下</h2><blockquote><p>去gitee上下载Fluid主题模板（github上真的太慢了有时候还下不下来。）</p><p>git clone <a href="https://gitee.com/mirrors/hexo-theme-fluid.git">https://gitee.com/mirrors/hexo-theme-fluid.git</a></p></blockquote><h2 id="【2】修改-conf-yml"><a href="#【2】修改-conf-yml" class="headerlink" title="【2】修改_conf.yml"></a>【2】修改_conf.yml</h2><blockquote><p>找到theme，替换为对应下载主题名字（在themes下载下来的文件夹名）</p><p>theme: hexo-theme-fluid</p></blockquote><h2 id="【3】修改为主题语言为中文"><a href="#【3】修改为主题语言为中文" class="headerlink" title="【3】修改为主题语言为中文"></a>【3】修改为主题语言为中文</h2><blockquote><p>在blog目录下的_conf.yml，找到文件内容里的language替换为以下</p><p>language: zh-CN #指定语言，会影响主题显示的语言，按需修改</p></blockquote><h2 id="【4】生成about页面"><a href="#【4】生成about页面" class="headerlink" title="【4】生成about页面"></a>【4】生成about页面</h2><blockquote><p>在blog路径下，执行指令（管理员cmd操作）</p><p>hexo new page about</p><p>创建成功后，去到blog\source\about\index.md，添加layout属性，以为为index.md里所有内容</p><p>-–<br>title: about<br>date: 2021-10-01 14:53:12<br>layout: about<br>-–</p></blockquote><h1 id="【图片、内容等修改】"><a href="#【图片、内容等修改】" class="headerlink" title="【图片、内容等修改】"></a>【图片、内容等修改】</h1><h2 id="【1】添加友链导航"><a href="#【1】添加友链导航" class="headerlink" title="【1】添加友链导航"></a>【1】添加友链导航</h2><blockquote><p>【参考地址】：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5">https://hexo.fluid-dev.com/docs/guide/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5</a></p><p>在blog\themes\hexo-theme-fluid目录下的_config.yml内容中去掉 navbar导航栏 menu下的link 前的注释</p><p>menu:<br>- { key: “home”, link: “&#x2F;“, icon: “iconfont icon-home-fill” }<br>- { key: “archive”, link: “&#x2F;archives&#x2F;“, icon: “iconfont icon-archive-fill” }<br>- { key: “category”, link: “&#x2F;categories&#x2F;“, icon: “iconfont icon-category-fill” }<br>- { key: “tag”, link: “&#x2F;tags&#x2F;“, icon: “iconfont icon-tags-fill” }<br>- { key: “about”, link: “&#x2F;about&#x2F;“, icon: “iconfont icon-user-fill” }<br>- { key: “links”, link: “&#x2F;links&#x2F;“, icon: “iconfont icon-link-fill” }</p></blockquote><h2 id="【2】改页面标题和页面前的小icons"><a href="#【2】改页面标题和页面前的小icons" class="headerlink" title="【2】改页面标题和页面前的小icons"></a>【2】改页面标题和页面前的小icons</h2><blockquote><p>blog目录下的_config.yml的内容中</p><p>原来是有title: Hexo</p><p>改为title: 果果博客</p></blockquote><blockquote><p>blog\themes\hexo-theme-fluid\主题目录下的_config.yml的内容中</p><p>navbar:</p><p> blog_title: “Fluid”</p><p>改为</p><p>navbar:</p><p> blog_title: “果果博客”</p><p>同样文件，找到首页（index）</p><p>index:<br># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同<br># Path of Banner image, can be a relative path or an absolute path, the same on other pages<br>banner_img: &#x2F;img&#x2F;default.png</p><p># 头图高度，屏幕百分比<br># Height ratio of banner image<br># Available: 0 - 100<br>banner_img_height: 100</p><p># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明<br># Opacity of the banner mask, 1.0 is completely opaque<br># Available: 0 - 1.0<br>banner_mask_alpha: 0.3</p><p># 首页副标题的独立设置<br># Independent config of home page subtitle<br>slogan:<br>enable: true</p><p># 为空则按 hexo config.subtitle 显示<br># If empty, text based on <code>subtitle</code> in hexo config<br>text: “An elegant Material-Design theme for Hexo”</p><p>这里的text改成你想改的</p><p>text: “一剑霜寒十四州”</p></blockquote><blockquote><p>修改icons或者其他图片，找到blog\themes\hexo-theme-fluid\source\img目录下（注意不是blog\public\img目录下的，public的目录文件不需要改，因为每次hexo clean都会删除了，然后hexo g再重新创建）</p><p>在这里面替换成你想要的图片、icon就好了。</p></blockquote><h1 id="【-md文件博客上传】"><a href="#【-md文件博客上传】" class="headerlink" title="【.md文件博客上传】"></a>【.md文件博客上传】</h1><blockquote><p>首先，写好一个.md，作为你的博客了。</p><p>也可以直接在blog目录下，执行以下指令生成.md，再进行对该.md进行完善内容。</p><p>hexo new “《我的第一个日记》”</p><p>这时候就生成在blog\source_posts目录下了</p><p>你已经写好了.md，也可以直接移动到这里，然后再重新启动hexo三件套就好了。（hexo clean、hexo g、hexo s）</p></blockquote><blockquote><p>标签添加</p><p>在你想添加标签的.md文件中，添加tags: “标签名”</p><p>-–<br>title: 《个人博客搭建》<br>date: 2021-10-01 15:35:44<br>tags: “《博客搭建相关》”<br>-–</p></blockquote><h1 id="【宠物插件】"><a href="#【宠物插件】" class="headerlink" title="【宠物插件】"></a>【宠物插件】</h1><blockquote><p>npm install –save hexo-helper-live2d<br>或<br>cnpm install –save hexo-helper-live2d</p><p>1、cnpm install –save hexo-helper-live2d<br>2、<a href="https://www.npmjs.com/package/hexo-helper-live2d">live2d插件</a><br>3、安装合适的宠物cnpm install live2d-widget-model-chitose<br>4、在博客_config.yml配置文件中（不是themes里的）添加即可</p></blockquote><h1 id="【提交搭建的博客到Gitee上，正式完成博客搭建】"><a href="#【提交搭建的博客到Gitee上，正式完成博客搭建】" class="headerlink" title="【提交搭建的博客到Gitee上，正式完成博客搭建】"></a>【提交搭建的博客到Gitee上，正式完成博客搭建】</h1><blockquote><p>修改blog_config.yml配置文件的站点地址（找到deploy）：</p><p>deploy:<br>type: git<br>repo:<br>branch: master<br>live2d: <a href="https://gitee.com/southern-adui/southern-adui.git">https://gitee.com/southern-adui/southern-adui.git</a><br>enable: true</p><p>安装git上传助手（如果有git设置过有帐号密码，就去先对git进行操作）</p><p>npm install hexo-deployer-git –save<br>或<br>cnpm install hexo-deployer-git –save</p><p>完成后，输入</p><p>hexo d</p></blockquote><blockquote><p>git的操作<br>查看配置信息： $ git config –list<br>修改用户名<br>git config –global user.name “xxxx(新的用户名)”<br>修改密码<br>git config –global user.password “xxxx(新的密码)”<br>修改邮箱<br>git config –global user.email “<a href="mailto:xxxx@xxx.com">xxxx@xxx.com</a>(新的邮箱)”<br>清除掉缓存在git中的用户名和密码<br>git credential-manager uninstall</p></blockquote><h1 id="【一些小提示】"><a href="#【一些小提示】" class="headerlink" title="【一些小提示】"></a>【一些小提示】</h1><p>分类页面需要在创建的 markdown文件里面添加</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Hello World</span><br><span class="hljs-attribute">date</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2023-06-25 18:01:38</span><br><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">web（随意添加）</span><br></code></pre></td></tr></table></figure><p>这样就可以在分类页面添加一个分类web</p><p>标签页同理</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: Hello World<br>date: 2023<span class="hljs-string">-06</span><span class="hljs-string">-25</span> 18:01:38<br>categories:<br>  - web<br><span class="hljs-keyword">tags:</span><br>  - 免费资源（随意添加）<br></code></pre></td></tr></table></figure><p>这样就可以在标签页添加一个免费资源的标签</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora免费版</title>
    <link href="/2023/06/26/typora/"/>
    <url>/2023/06/26/typora/</url>
    
    <content type="html"><![CDATA[<p>资源分享</p><p>链接: <a href="https://pan.baidu.com/s/1I6Jt13n0Ca9tKA4aZVnsDA?pwd=r38r">https://pan.baidu.com/s/1I6Jt13n0Ca9tKA4aZVnsDA?pwd=r38r</a> </p><p>提取码: r38r </p>]]></content>
    
    
    <categories>
      
      <category>免费资源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免费资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/25/hello-world/"/>
    <url>/2023/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
